version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: always

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ test-frontend ]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: always

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ test-backend ]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ scan-frontend ]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ scan-backend ]
      - run:
          name: scan backend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \

      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
              root: .
              paths:
                - .circleci/ansible/inventory.txt

      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1a:cc:6a:c7:af:6f:e8:58:b7:3c:3b:70:b1:da:41:19"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
            apk add openssh-client
            pip install awscli
      - run:
          name: Configure server
          command: |
            # Your code here
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
#      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          command: |
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/*/*/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo "npm install"
            npm install
            echo "npm migrations"
            npm run migrations > migrations_dump.txt
            echo "----------------------------------"
            cat migrations_dump.txt 
            echo "----------------------------------"

      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo 'Migrated successfully'
              curl https://kvdb.io/7wdw3cvuAaQ77aYPkNJ1R7/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else:
              echo 'Migration failed'
              curl https://kvdb.io/7wdw3cvuAaQ77aYPkNJ1R7/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      # Here's where you will add some code to rollback on failure
#      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install python3
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "BACKEND_IP = ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy
          command: |           
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
#     - destroy-environment
      - slack/notify:
         event: fail
         template: basic_fail_1

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1a:cc:6a:c7:af:6f:e8:58:b7:3c:3b:70:b1:da:41:19"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            apk add curl
            apk add openssh-client nodejs npm
            pip install awscli
            npm install
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            # Here's where you will add some code to rollback on failure  
#     - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y curl
      - run:
          name: Backend Smoke Test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            sleep 120
            echo "${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              return o
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here          
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"  
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
          context: CI_SLACK
      - test-backend:
          requires: [build-backend]
          context: CI_SLACK
      - scan-backend:
          requires: [build-backend]
          context: CI_SLACK
      - scan-frontend:
          requires: [build-frontend]
          context: CI_SLACK
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [dev-branch]
          context: CI_SLACK
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: CI_SLACK
      - run-migrations:
          requires: [configure-infrastructure]
          context: CI_SLACK
      - deploy-frontend:
          requires: [run-migrations]
          context: CI_SLACK
      - deploy-backend:
          requires: [ run-migrations ]
          context: CI_SLACK
      - smoke-test:
          requires: [ deploy-backend,deploy-frontend ]
          context: CI_SLACK